{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Hbv classification with random forest","provenance":[],"authorship_tag":"ABX9TyN+BXEz0MiFhJqmRUShW0VE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv(\"/content/coronaviridae-genome (1).csv\")\n","df"],"metadata":{"id":"KxhbxEwr9PuS","colab":{"base_uri":"https://localhost:8080/","height":505},"executionInfo":{"status":"ok","timestamp":1643419019000,"user_tz":-420,"elapsed":467,"user":{"displayName":"Heru Triana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj5sLnzUpfXBsmMId8RvnAH_VN-qd0whpiPcuz8HQ=s64","userId":"04081911873733276476"}},"outputId":"1d8dea7d-cdf8-4dc4-c8d7-2d7caed0962a"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-3763021d-a1e4-47c3-afc7-f51ae7094625\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Phe</th>\n","      <th>Leu</th>\n","      <th>Ile</th>\n","      <th>Met</th>\n","      <th>Val</th>\n","      <th>Ser</th>\n","      <th>Pro</th>\n","      <th>Thr</th>\n","      <th>Ala</th>\n","      <th>Tyr</th>\n","      <th>His</th>\n","      <th>Gln</th>\n","      <th>Asn</th>\n","      <th>Lys</th>\n","      <th>Asp</th>\n","      <th>Glu</th>\n","      <th>Cys</th>\n","      <th>Trp</th>\n","      <th>Arg</th>\n","      <th>Gly</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>8.103091</td>\n","      <td>11.455717</td>\n","      <td>5.209130</td>\n","      <td>2.063995</td>\n","      <td>7.163918</td>\n","      <td>7.054712</td>\n","      <td>2.140439</td>\n","      <td>5.307415</td>\n","      <td>3.254341</td>\n","      <td>5.471224</td>\n","      <td>2.413454</td>\n","      <td>1.965709</td>\n","      <td>3.811292</td>\n","      <td>3.691165</td>\n","      <td>2.555422</td>\n","      <td>1.878344</td>\n","      <td>7.589822</td>\n","      <td>3.057770</td>\n","      <td>3.505515</td>\n","      <td>3.571039</td>\n","      <td>alphacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>8.081249</td>\n","      <td>11.422955</td>\n","      <td>5.209130</td>\n","      <td>2.085836</td>\n","      <td>7.152998</td>\n","      <td>7.065633</td>\n","      <td>2.151360</td>\n","      <td>5.318336</td>\n","      <td>3.254341</td>\n","      <td>5.503986</td>\n","      <td>2.391613</td>\n","      <td>1.998471</td>\n","      <td>3.789451</td>\n","      <td>3.691165</td>\n","      <td>2.555422</td>\n","      <td>1.878344</td>\n","      <td>7.600743</td>\n","      <td>3.046849</td>\n","      <td>3.505515</td>\n","      <td>3.592880</td>\n","      <td>alphacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>8.124932</td>\n","      <td>11.412035</td>\n","      <td>5.230971</td>\n","      <td>2.096757</td>\n","      <td>7.174839</td>\n","      <td>7.032871</td>\n","      <td>2.140439</td>\n","      <td>5.263733</td>\n","      <td>3.243420</td>\n","      <td>5.482145</td>\n","      <td>2.424375</td>\n","      <td>2.009392</td>\n","      <td>3.811292</td>\n","      <td>3.691165</td>\n","      <td>2.555422</td>\n","      <td>1.878344</td>\n","      <td>7.600743</td>\n","      <td>3.068691</td>\n","      <td>3.472753</td>\n","      <td>3.581959</td>\n","      <td>alphacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>8.010477</td>\n","      <td>11.502783</td>\n","      <td>5.238459</td>\n","      <td>2.084470</td>\n","      <td>7.137400</td>\n","      <td>7.028266</td>\n","      <td>2.171778</td>\n","      <td>5.282113</td>\n","      <td>3.208556</td>\n","      <td>5.500382</td>\n","      <td>2.324566</td>\n","      <td>1.975336</td>\n","      <td>3.765142</td>\n","      <td>3.688748</td>\n","      <td>2.553749</td>\n","      <td>1.877114</td>\n","      <td>7.683073</td>\n","      <td>3.044854</td>\n","      <td>3.568700</td>\n","      <td>3.634181</td>\n","      <td>alphacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>8.010477</td>\n","      <td>11.491869</td>\n","      <td>5.216632</td>\n","      <td>2.084470</td>\n","      <td>7.148314</td>\n","      <td>7.039179</td>\n","      <td>2.160864</td>\n","      <td>5.303940</td>\n","      <td>3.197643</td>\n","      <td>5.478555</td>\n","      <td>2.357307</td>\n","      <td>1.986249</td>\n","      <td>3.754229</td>\n","      <td>3.688748</td>\n","      <td>2.575576</td>\n","      <td>1.877114</td>\n","      <td>7.704900</td>\n","      <td>3.044854</td>\n","      <td>3.525046</td>\n","      <td>3.623267</td>\n","      <td>alphacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>361</th>\n","      <td>361</td>\n","      <td>4.573535</td>\n","      <td>17.028697</td>\n","      <td>5.649661</td>\n","      <td>2.939418</td>\n","      <td>6.556397</td>\n","      <td>8.489438</td>\n","      <td>3.756477</td>\n","      <td>5.649661</td>\n","      <td>4.105221</td>\n","      <td>3.527302</td>\n","      <td>3.328019</td>\n","      <td>3.357912</td>\n","      <td>2.819849</td>\n","      <td>3.427660</td>\n","      <td>1.195695</td>\n","      <td>1.554404</td>\n","      <td>5.031885</td>\n","      <td>2.032682</td>\n","      <td>5.141491</td>\n","      <td>2.909526</td>\n","      <td>betacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>362</th>\n","      <td>362</td>\n","      <td>4.511952</td>\n","      <td>17.041833</td>\n","      <td>5.627490</td>\n","      <td>2.978088</td>\n","      <td>6.484064</td>\n","      <td>8.486056</td>\n","      <td>3.824701</td>\n","      <td>5.617530</td>\n","      <td>4.163347</td>\n","      <td>3.466135</td>\n","      <td>3.366534</td>\n","      <td>3.356574</td>\n","      <td>2.838645</td>\n","      <td>3.436255</td>\n","      <td>1.205179</td>\n","      <td>1.563745</td>\n","      <td>5.039841</td>\n","      <td>2.021912</td>\n","      <td>5.179283</td>\n","      <td>2.918327</td>\n","      <td>betacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>363</th>\n","      <td>363</td>\n","      <td>5.469762</td>\n","      <td>9.285643</td>\n","      <td>4.164591</td>\n","      <td>1.285245</td>\n","      <td>6.187108</td>\n","      <td>8.707781</td>\n","      <td>3.736176</td>\n","      <td>5.439872</td>\n","      <td>4.463485</td>\n","      <td>5.250573</td>\n","      <td>3.616619</td>\n","      <td>3.018830</td>\n","      <td>3.367540</td>\n","      <td>3.327688</td>\n","      <td>2.949088</td>\n","      <td>2.401116</td>\n","      <td>6.705191</td>\n","      <td>2.560526</td>\n","      <td>5.987845</td>\n","      <td>4.553153</td>\n","      <td>betacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>364</th>\n","      <td>364</td>\n","      <td>4.560912</td>\n","      <td>17.053411</td>\n","      <td>5.701140</td>\n","      <td>2.960592</td>\n","      <td>6.541308</td>\n","      <td>8.461692</td>\n","      <td>3.770754</td>\n","      <td>5.631126</td>\n","      <td>4.110822</td>\n","      <td>3.530706</td>\n","      <td>3.330666</td>\n","      <td>3.370674</td>\n","      <td>2.790558</td>\n","      <td>3.420684</td>\n","      <td>1.190238</td>\n","      <td>1.550310</td>\n","      <td>5.061012</td>\n","      <td>2.040408</td>\n","      <td>5.141028</td>\n","      <td>2.900580</td>\n","      <td>betacoronavirus</td>\n","    </tr>\n","    <tr>\n","      <th>365</th>\n","      <td>365</td>\n","      <td>4.600920</td>\n","      <td>17.043409</td>\n","      <td>5.741148</td>\n","      <td>2.970594</td>\n","      <td>6.551310</td>\n","      <td>8.461692</td>\n","      <td>3.740748</td>\n","      <td>5.591118</td>\n","      <td>4.090818</td>\n","      <td>3.540708</td>\n","      <td>3.320664</td>\n","      <td>3.360672</td>\n","      <td>2.800560</td>\n","      <td>3.410682</td>\n","      <td>1.180236</td>\n","      <td>1.570314</td>\n","      <td>5.031006</td>\n","      <td>2.040408</td>\n","      <td>5.161032</td>\n","      <td>2.890578</td>\n","      <td>betacoronavirus</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>366 rows Ã— 22 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3763021d-a1e4-47c3-afc7-f51ae7094625')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3763021d-a1e4-47c3-afc7-f51ae7094625 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3763021d-a1e4-47c3-afc7-f51ae7094625');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["     Unnamed: 0       Phe        Leu  ...       Arg       Gly            Status\n","0             0  8.103091  11.455717  ...  3.505515  3.571039  alphacoronavirus\n","1             1  8.081249  11.422955  ...  3.505515  3.592880  alphacoronavirus\n","2             2  8.124932  11.412035  ...  3.472753  3.581959  alphacoronavirus\n","3             3  8.010477  11.502783  ...  3.568700  3.634181  alphacoronavirus\n","4             4  8.010477  11.491869  ...  3.525046  3.623267  alphacoronavirus\n","..          ...       ...        ...  ...       ...       ...               ...\n","361         361  4.573535  17.028697  ...  5.141491  2.909526   betacoronavirus\n","362         362  4.511952  17.041833  ...  5.179283  2.918327   betacoronavirus\n","363         363  5.469762   9.285643  ...  5.987845  4.553153   betacoronavirus\n","364         364  4.560912  17.053411  ...  5.141028  2.900580   betacoronavirus\n","365         365  4.600920  17.043409  ...  5.161032  2.890578   betacoronavirus\n","\n","[366 rows x 22 columns]"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["!pip install tensorflow_decision_forests"],"metadata":{"id":"ag5l0eFa9uhn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"WTAsbEXG9B6K","executionInfo":{"status":"ok","timestamp":1643419149972,"user_tz":-420,"elapsed":8799,"user":{"displayName":"Heru Triana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj5sLnzUpfXBsmMId8RvnAH_VN-qd0whpiPcuz8HQ=s64","userId":"04081911873733276476"}},"outputId":"7720c4ee-320c-4252-b1ff-5cc920c0869d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Use /tmp/tmphcbt3t4k as temporary training directory\n","Starting reading the dataset\n","1/1 [==============================] - ETA: 0s\n","Dataset read in 0:00:05.723184\n","Training model\n","Model trained in 0:00:00.105877\n","Warning:  Tracing the TF graph and reading the dataset took more than 50% of the time to effectively train the model (tracing+dataset reading: 0:00:05.723184, training: 0:00:00.105877). This might indicates that the dataset reading operation e.g. tf.data.Dataset is not well configured. In mose cases, this ratio should be <<10%.\n","Compiling model\n","1/1 [==============================] - 6s 6s/step\n","WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f2ac668ddd0> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f2ac668ddd0> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stdout","text":["WARNING: AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f2ac668ddd0> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n","Model: \"random_forest_model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n","=================================================================\n","Total params: 1\n","Trainable params: 0\n","Non-trainable params: 1\n","_________________________________________________________________\n","Type: \"RANDOM_FOREST\"\n","Task: CLASSIFICATION\n","Label: \"__LABEL\"\n","\n","Input Features (20):\n","\tAla\n","\tArg\n","\tAsn\n","\tAsp\n","\tCys\n","\tGln\n","\tGlu\n","\tGly\n","\tHis\n","\tIle\n","\tLeu\n","\tLys\n","\tMet\n","\tPhe\n","\tPro\n","\tSer\n","\tThr\n","\tTrp\n","\tTyr\n","\tVal\n","\n","No weights\n","\n","Variable Importance: MEAN_MIN_DEPTH:\n","    1. \"__LABEL\"  1.996333 ################\n","    2.     \"Glu\"  1.991667 ###############\n","    3.     \"Ile\"  1.990889 ###############\n","    4.     \"Leu\"  1.988667 ###############\n","    5.     \"Gly\"  1.987000 ###############\n","    6.     \"Met\"  1.978611 ###############\n","    7.     \"Asp\"  1.971000 ###############\n","    8.     \"Trp\"  1.951333 ##############\n","    9.     \"Tyr\"  1.944278 ##############\n","   10.     \"Val\"  1.907333 #############\n","   11.     \"Ala\"  1.902889 #############\n","   12.     \"Thr\"  1.899889 #############\n","   13.     \"Gln\"  1.866056 ############\n","   14.     \"Cys\"  1.855889 ############\n","   15.     \"Phe\"  1.811833 ##########\n","   16.     \"Asn\"  1.796778 ##########\n","   17.     \"Lys\"  1.789500 ##########\n","   18.     \"His\"  1.661833 ######\n","   19.     \"Arg\"  1.633333 ######\n","   20.     \"Ser\"  1.483556 #\n","   21.     \"Pro\"  1.412056 \n","\n","Variable Importance: NUM_AS_ROOT:\n","    1. \"Pro\" 87.000000 ################\n","    2. \"Ser\" 66.000000 ############\n","    3. \"Arg\" 47.000000 ########\n","    4. \"His\" 37.000000 ######\n","    5. \"Lys\" 23.000000 ####\n","    6. \"Asn\" 17.000000 ##\n","    7. \"Phe\"  8.000000 #\n","    8. \"Ala\"  5.000000 \n","    9. \"Val\"  3.000000 \n","   10. \"Cys\"  2.000000 \n","   11. \"Gln\"  2.000000 \n","   12. \"Trp\"  2.000000 \n","   13. \"Thr\"  1.000000 \n","\n","Variable Importance: NUM_NODES:\n","    1. \"Pro\" 150.000000 ################\n","    2. \"Ser\" 131.000000 #############\n","    3. \"His\" 70.000000 #######\n","    4. \"Phe\" 63.000000 ######\n","    5. \"Arg\" 58.000000 ######\n","    6. \"Cys\" 58.000000 ######\n","    7. \"Gln\" 55.000000 #####\n","    8. \"Asn\" 48.000000 ####\n","    9. \"Thr\" 48.000000 ####\n","   10. \"Val\" 35.000000 ###\n","   11. \"Lys\" 33.000000 ###\n","   12. \"Ala\" 32.000000 ###\n","   13. \"Tyr\" 22.000000 ##\n","   14. \"Trp\" 13.000000 #\n","   15. \"Asp\" 10.000000 \n","   16. \"Met\"  8.000000 \n","   17. \"Gly\"  5.000000 \n","   18. \"Ile\"  4.000000 \n","   19. \"Leu\"  4.000000 \n","   20. \"Glu\"  2.000000 \n","\n","Variable Importance: SUM_SCORE:\n","    1. \"Pro\" 20970.198684 ################\n","    2. \"Ser\" 14560.526300 ###########\n","    3. \"Arg\" 8747.276889 ######\n","    4. \"His\" 7194.664871 #####\n","    5. \"Lys\" 3728.932852 ##\n","    6. \"Asn\" 3067.550460 ##\n","    7. \"Phe\" 2411.325886 #\n","    8. \"Cys\" 1630.136599 #\n","    9. \"Ala\" 1580.482686 #\n","   10. \"Gln\" 1218.504471 \n","   11. \"Thr\" 1116.973725 \n","   12. \"Val\" 945.300808 \n","   13. \"Tyr\" 523.855260 \n","   14. \"Trp\" 380.323454 \n","   15. \"Met\" 131.334912 \n","   16. \"Asp\" 110.091448 \n","   17. \"Leu\" 108.092348 \n","   18. \"Gly\" 75.561618 \n","   19. \"Ile\" 27.270597 \n","   20. \"Glu\" 20.864702 \n","\n","\n","\n","Winner take all: true\n","Out-of-bag evaluation: accuracy:0.991803 logloss:0.0187954\n","Number of trees: 300\n","Total number of nodes: 1998\n","\n","Number of nodes by tree:\n","Count: 300 Average: 6.66 StdDev: 1.75245\n","Min: 3 Max: 11 Ignored: 0\n","----------------------------------------------\n","[  3,  4)   7   2.33%   2.33% #\n","[  4,  5)   0   0.00%   2.33%\n","[  5,  6) 118  39.33%  41.67% ##########\n","[  6,  7)   0   0.00%  41.67%\n","[  7,  8) 100  33.33%  75.00% ########\n","[  8,  9)   0   0.00%  75.00%\n","[  9, 10)  69  23.00%  98.00% ######\n","[ 10, 11)   0   0.00%  98.00%\n","[ 11, 11]   6   2.00% 100.00% #\n","\n","Depth by leafs:\n","Count: 1149 Average: 2.07833 StdDev: 0.651002\n","Min: 1 Max: 4 Ignored: 0\n","----------------------------------------------\n","[ 1, 2) 182  15.84%  15.84% ###\n","[ 2, 3) 715  62.23%  78.07% ##########\n","[ 3, 4) 232  20.19%  98.26% ###\n","[ 4, 4]  20   1.74% 100.00%\n","\n","Number of training obs by leaf:\n","Count: 1149 Average: 95.5614 StdDev: 100.868\n","Min: 5 Max: 280 Ignored: 0\n","----------------------------------------------\n","[   5,  18) 521  45.34%  45.34% ##########\n","[  18,  32)  21   1.83%  47.17%\n","[  32,  46)   8   0.70%  47.87%\n","[  46,  60)   6   0.52%  48.39%\n","[  60,  74)   7   0.61%  49.00%\n","[  74,  87)  24   2.09%  51.09%\n","[  87, 101) 116  10.10%  61.18% ##\n","[ 101, 115) 129  11.23%  72.41% ##\n","[ 115, 129)  17   1.48%  73.89%\n","[ 129, 143)   0   0.00%  73.89%\n","[ 143, 156)   0   0.00%  73.89%\n","[ 156, 170)   0   0.00%  73.89%\n","[ 170, 184)   0   0.00%  73.89%\n","[ 184, 198)   0   0.00%  73.89%\n","[ 198, 212)   0   0.00%  73.89%\n","[ 212, 225)   0   0.00%  73.89%\n","[ 225, 239)  34   2.96%  76.85% #\n","[ 239, 253) 112   9.75%  86.60% ##\n","[ 253, 267) 116  10.10%  96.69% ##\n","[ 267, 280]  38   3.31% 100.00% #\n","\n","Attribute in nodes:\n","\t150 : Pro [NUMERICAL]\n","\t131 : Ser [NUMERICAL]\n","\t70 : His [NUMERICAL]\n","\t63 : Phe [NUMERICAL]\n","\t58 : Cys [NUMERICAL]\n","\t58 : Arg [NUMERICAL]\n","\t55 : Gln [NUMERICAL]\n","\t48 : Thr [NUMERICAL]\n","\t48 : Asn [NUMERICAL]\n","\t35 : Val [NUMERICAL]\n","\t33 : Lys [NUMERICAL]\n","\t32 : Ala [NUMERICAL]\n","\t22 : Tyr [NUMERICAL]\n","\t13 : Trp [NUMERICAL]\n","\t10 : Asp [NUMERICAL]\n","\t8 : Met [NUMERICAL]\n","\t5 : Gly [NUMERICAL]\n","\t4 : Leu [NUMERICAL]\n","\t4 : Ile [NUMERICAL]\n","\t2 : Glu [NUMERICAL]\n","\n","Attribute in nodes with depth <= 0:\n","\t87 : Pro [NUMERICAL]\n","\t66 : Ser [NUMERICAL]\n","\t47 : Arg [NUMERICAL]\n","\t37 : His [NUMERICAL]\n","\t23 : Lys [NUMERICAL]\n","\t17 : Asn [NUMERICAL]\n","\t8 : Phe [NUMERICAL]\n","\t5 : Ala [NUMERICAL]\n","\t3 : Val [NUMERICAL]\n","\t2 : Trp [NUMERICAL]\n","\t2 : Gln [NUMERICAL]\n","\t2 : Cys [NUMERICAL]\n","\t1 : Thr [NUMERICAL]\n","\n","Attribute in nodes with depth <= 1:\n","\t143 : Pro [NUMERICAL]\n","\t118 : Ser [NUMERICAL]\n","\t62 : His [NUMERICAL]\n","\t54 : Arg [NUMERICAL]\n","\t50 : Phe [NUMERICAL]\n","\t49 : Cys [NUMERICAL]\n","\t46 : Gln [NUMERICAL]\n","\t40 : Thr [NUMERICAL]\n","\t38 : Asn [NUMERICAL]\n","\t28 : Lys [NUMERICAL]\n","\t28 : Ala [NUMERICAL]\n","\t24 : Val [NUMERICAL]\n","\t17 : Tyr [NUMERICAL]\n","\t10 : Trp [NUMERICAL]\n","\t4 : Asp [NUMERICAL]\n","\t3 : Met [NUMERICAL]\n","\t2 : Leu [NUMERICAL]\n","\t1 : Gly [NUMERICAL]\n","\t1 : Glu [NUMERICAL]\n","\n","Attribute in nodes with depth <= 2:\n","\t150 : Pro [NUMERICAL]\n","\t131 : Ser [NUMERICAL]\n","\t70 : His [NUMERICAL]\n","\t63 : Phe [NUMERICAL]\n","\t58 : Cys [NUMERICAL]\n","\t56 : Arg [NUMERICAL]\n","\t55 : Gln [NUMERICAL]\n","\t48 : Thr [NUMERICAL]\n","\t46 : Asn [NUMERICAL]\n","\t33 : Val [NUMERICAL]\n","\t32 : Lys [NUMERICAL]\n","\t32 : Ala [NUMERICAL]\n","\t22 : Tyr [NUMERICAL]\n","\t12 : Trp [NUMERICAL]\n","\t8 : Met [NUMERICAL]\n","\t8 : Asp [NUMERICAL]\n","\t5 : Gly [NUMERICAL]\n","\t4 : Leu [NUMERICAL]\n","\t4 : Ile [NUMERICAL]\n","\t2 : Glu [NUMERICAL]\n","\n","Attribute in nodes with depth <= 3:\n","\t150 : Pro [NUMERICAL]\n","\t131 : Ser [NUMERICAL]\n","\t70 : His [NUMERICAL]\n","\t63 : Phe [NUMERICAL]\n","\t58 : Cys [NUMERICAL]\n","\t58 : Arg [NUMERICAL]\n","\t55 : Gln [NUMERICAL]\n","\t48 : Thr [NUMERICAL]\n","\t48 : Asn [NUMERICAL]\n","\t35 : Val [NUMERICAL]\n","\t33 : Lys [NUMERICAL]\n","\t32 : Ala [NUMERICAL]\n","\t22 : Tyr [NUMERICAL]\n","\t13 : Trp [NUMERICAL]\n","\t10 : Asp [NUMERICAL]\n","\t8 : Met [NUMERICAL]\n","\t5 : Gly [NUMERICAL]\n","\t4 : Leu [NUMERICAL]\n","\t4 : Ile [NUMERICAL]\n","\t2 : Glu [NUMERICAL]\n","\n","Attribute in nodes with depth <= 5:\n","\t150 : Pro [NUMERICAL]\n","\t131 : Ser [NUMERICAL]\n","\t70 : His [NUMERICAL]\n","\t63 : Phe [NUMERICAL]\n","\t58 : Cys [NUMERICAL]\n","\t58 : Arg [NUMERICAL]\n","\t55 : Gln [NUMERICAL]\n","\t48 : Thr [NUMERICAL]\n","\t48 : Asn [NUMERICAL]\n","\t35 : Val [NUMERICAL]\n","\t33 : Lys [NUMERICAL]\n","\t32 : Ala [NUMERICAL]\n","\t22 : Tyr [NUMERICAL]\n","\t13 : Trp [NUMERICAL]\n","\t10 : Asp [NUMERICAL]\n","\t8 : Met [NUMERICAL]\n","\t5 : Gly [NUMERICAL]\n","\t4 : Leu [NUMERICAL]\n","\t4 : Ile [NUMERICAL]\n","\t2 : Glu [NUMERICAL]\n","\n","Condition type in nodes:\n","\t849 : HigherCondition\n","Condition type in nodes with depth <= 0:\n","\t300 : HigherCondition\n","Condition type in nodes with depth <= 1:\n","\t718 : HigherCondition\n","Condition type in nodes with depth <= 2:\n","\t839 : HigherCondition\n","Condition type in nodes with depth <= 3:\n","\t849 : HigherCondition\n","Condition type in nodes with depth <= 5:\n","\t849 : HigherCondition\n","Node format: NOT_SET\n","\n","Training OOB:\n","\ttrees: 1, Out-of-bag evaluation: accuracy:0.992424 logloss:0.273058\n","\ttrees: 11, Out-of-bag evaluation: accuracy:0.991781 logloss:0.110256\n","\ttrees: 21, Out-of-bag evaluation: accuracy:0.991803 logloss:0.109877\n","\ttrees: 31, Out-of-bag evaluation: accuracy:0.991803 logloss:0.111064\n","\ttrees: 41, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0210369\n","\ttrees: 51, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0209881\n","\ttrees: 61, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0207036\n","\ttrees: 71, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0179664\n","\ttrees: 81, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0190947\n","\ttrees: 91, Out-of-bag evaluation: accuracy:0.991803 logloss:0.018904\n","\ttrees: 101, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0187166\n","\ttrees: 111, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0189898\n","\ttrees: 121, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0191287\n","\ttrees: 131, Out-of-bag evaluation: accuracy:0.991803 logloss:0.019346\n","\ttrees: 141, Out-of-bag evaluation: accuracy:0.991803 logloss:0.01937\n","\ttrees: 151, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0191471\n","\ttrees: 161, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0190976\n","\ttrees: 171, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0185408\n","\ttrees: 181, Out-of-bag evaluation: accuracy:0.991803 logloss:0.018711\n","\ttrees: 191, Out-of-bag evaluation: accuracy:0.991803 logloss:0.018469\n","\ttrees: 201, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0189831\n","\ttrees: 211, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0192474\n","\ttrees: 221, Out-of-bag evaluation: accuracy:0.991803 logloss:0.019449\n","\ttrees: 231, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0193696\n","\ttrees: 241, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0189138\n","\ttrees: 251, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0188471\n","\ttrees: 261, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0187058\n","\ttrees: 271, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0187864\n","\ttrees: 281, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0185212\n","\ttrees: 291, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0185635\n","\ttrees: 300, Out-of-bag evaluation: accuracy:0.991803 logloss:0.0187954\n","\n","None\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\n<script src=\"https://d3js.org/d3.v6.min.js\"></script>\\n<div id=\"tree_plot_7c1363afdee54902bb71e2703ab75131\"></div>\\n<script>\\n/*\\n * Copyright 2021 Google LLC.\\n * Licensed under the Apache License, Version 2.0 (the \"License\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \"AS IS\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n/**\\n *  Plotting of decision trees generated by TF-DF.\\n *\\n *  A tree is a recursive structure of node objects.\\n *  A node contains one or more of the following components:\\n *\\n *    - A value: Representing the output of the node. If the node is not a leaf,\\n *      the value is only present for analysis i.e. it is not used for\\n *      predictions.\\n *\\n *    - A condition : For non-leaf nodes, the condition (also known as split)\\n *      defines a binary test to branch to the positive or negative child.\\n *\\n *    - An explanation: Generally a plot showing the relation between the label\\n *      and the condition to give insights about the effect of the condition.\\n *\\n *    - Two children : For non-leaf nodes, the children nodes. The first\\n *      children (i.e. \"node.children[0]\") is the negative children (drawn in\\n *      red). The second children is the positive one (drawn in green).\\n *\\n */\\n\\n/**\\n * Plots a single decision tree into a DOM element.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!tree} raw_tree Recursive tree structure.\\n * @param {string} canvas_id Id of the output dom element.\\n */\\nfunction display_tree(options, raw_tree, canvas_id) {\\n  console.log(options);\\n\\n  // Determine the node placement.\\n  const tree_struct = d3.tree().nodeSize(\\n      [options.node_y_offset, options.node_x_offset])(d3.hierarchy(raw_tree));\\n\\n  // Boundaries of the node placement.\\n  let x_min = Infinity;\\n  let x_max = -x_min;\\n  let y_min = Infinity;\\n  let y_max = -x_min;\\n\\n  tree_struct.each(d => {\\n    if (d.x > x_max) x_max = d.x;\\n    if (d.x < x_min) x_min = d.x;\\n    if (d.y > y_max) y_max = d.y;\\n    if (d.y < y_min) y_min = d.y;\\n  });\\n\\n  // Size of the plot.\\n  const width = y_max - y_min + options.node_x_size + options.margin * 2;\\n  const height = x_max - x_min + options.node_y_size + options.margin * 2 +\\n      options.node_y_offset - options.node_y_size;\\n\\n  const plot = d3.select(canvas_id);\\n\\n  // Tool tip\\n  options.tooltip = plot.append(\\'div\\')\\n                        .attr(\\'width\\', 100)\\n                        .attr(\\'height\\', 100)\\n                        .style(\\'padding\\', \\'4px\\')\\n                        .style(\\'background\\', \\'#fff\\')\\n                        .style(\\'box-shadow\\', \\'4px 4px 0px rgba(0,0,0,0.1)\\')\\n                        .style(\\'border\\', \\'1px solid black\\')\\n                        .style(\\'font-family\\', \\'sans-serif\\')\\n                        .style(\\'font-size\\', options.font_size)\\n                        .style(\\'position\\', \\'absolute\\')\\n                        .style(\\'z-index\\', \\'10\\')\\n                        .attr(\\'pointer-events\\', \\'none\\')\\n                        .style(\\'display\\', \\'none\\');\\n\\n  // Create canvas\\n  const svg = plot.append(\\'svg\\').attr(\\'width\\', width).attr(\\'height\\', height);\\n  const graph =\\n      svg.style(\\'overflow\\', \\'visible\\')\\n          .append(\\'g\\')\\n          .attr(\\'font-family\\', \\'sans-serif\\')\\n          .attr(\\'font-size\\', options.font_size)\\n          .attr(\\n              \\'transform\\',\\n              () => `translate(${options.margin},${\\n                  - x_min + options.node_y_offset / 2 + options.margin})`);\\n\\n  // Plot bounding box.\\n  if (options.show_plot_bounding_box) {\\n    svg.append(\\'rect\\')\\n        .attr(\\'width\\', width)\\n        .attr(\\'height\\', height)\\n        .attr(\\'fill\\', \\'none\\')\\n        .attr(\\'stroke-width\\', 1.0)\\n        .attr(\\'stroke\\', \\'black\\');\\n  }\\n\\n  // Draw the edges.\\n  display_edges(options, graph, tree_struct);\\n\\n  // Draw the nodes.\\n  display_nodes(options, graph, tree_struct);\\n}\\n\\n/**\\n * Draw the nodes of the tree.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!graph} graph D3 search handle containing the graph.\\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\\n *     data, etc.).\\n */\\nfunction display_nodes(options, graph, tree_struct) {\\n  const nodes = graph.append(\\'g\\')\\n                    .selectAll(\\'g\\')\\n                    .data(tree_struct.descendants())\\n                    .join(\\'g\\')\\n                    .attr(\\'transform\\', d => `translate(${d.y},${d.x})`);\\n\\n  nodes.append(\\'rect\\')\\n      .attr(\\'x\\', 0.5)\\n      .attr(\\'y\\', 0.5)\\n      .attr(\\'width\\', options.node_x_size)\\n      .attr(\\'height\\', options.node_y_size)\\n      .attr(\\'stroke\\', \\'lightgrey\\')\\n      .attr(\\'stroke-width\\', 1)\\n      .attr(\\'fill\\', \\'white\\')\\n      .attr(\\'y\\', -options.node_y_size / 2);\\n\\n  // Brackets on the right of condition nodes without children.\\n  non_leaf_node_without_children =\\n      nodes.filter(node => node.data.condition != null && node.children == null)\\n          .append(\\'g\\')\\n          .attr(\\'transform\\', `translate(${options.node_x_size},0)`);\\n\\n  non_leaf_node_without_children.append(\\'path\\')\\n      .attr(\\'d\\', \\'M0,0 C 10,0 0,10 10,10\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.0)\\n      .attr(\\'stroke\\', \\'#F00\\');\\n\\n  non_leaf_node_without_children.append(\\'path\\')\\n      .attr(\\'d\\', \\'M0,0 C 10,0 0,-10 10,-10\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.0)\\n      .attr(\\'stroke\\', \\'#0F0\\');\\n\\n  const node_content = nodes.append(\\'g\\').attr(\\n      \\'transform\\',\\n      `translate(0,${options.node_padding - options.node_y_size / 2})`);\\n\\n  node_content.append(node => create_node_element(options, node));\\n}\\n\\n/**\\n * Creates the D3 content for a single node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!node} node Node to draw.\\n * @return {!d3} D3 content.\\n */\\nfunction create_node_element(options, node) {\\n  // Output accumulator.\\n  let output = {\\n    // Content to draw.\\n    content: d3.create(\\'svg:g\\'),\\n    // Vertical offset to the next element to draw.\\n    vertical_offset: 0\\n  };\\n\\n  // Conditions.\\n  if (node.data.condition != null) {\\n    display_condition(options, node.data.condition, output);\\n  }\\n\\n  // Values.\\n  if (node.data.value != null) {\\n    display_value(options, node.data.value, output);\\n  }\\n\\n  // Explanations.\\n  if (node.data.explanation != null) {\\n    display_explanation(options, node.data.explanation, output);\\n  }\\n\\n  return output.content.node();\\n}\\n\\n\\n/**\\n * Adds a single line of text inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {string} text Text to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_node_text(options, text, output) {\\n  output.content.append(\\'text\\')\\n      .attr(\\'x\\', options.node_padding)\\n      .attr(\\'y\\', output.vertical_offset)\\n      .attr(\\'alignment-baseline\\', \\'hanging\\')\\n      .text(text);\\n  output.vertical_offset += 10;\\n}\\n\\n/**\\n * Adds a single line of text inside of a node with a tooltip.\\n * @param {!options} options Dictionary of configurations.\\n * @param {string} text Text to display.\\n * @param {string} tooltip Text in the Tooltip.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_node_text_with_tooltip(options, text, tooltip, output) {\\n  const item = output.content.append(\\'text\\')\\n                   .attr(\\'x\\', options.node_padding)\\n                   .attr(\\'alignment-baseline\\', \\'hanging\\')\\n                   .text(text);\\n\\n  add_tooltip(options, item, () => tooltip);\\n  output.vertical_offset += 10;\\n}\\n\\n/**\\n * Adds a tooltip to a dom element.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!dom} target Dom element to equip with a tooltip.\\n * @param {!func} get_content Generates the html content of the tooltip.\\n */\\nfunction add_tooltip(options, target, get_content) {\\n  function show(d) {\\n    options.tooltip.style(\\'display\\', \\'block\\');\\n    options.tooltip.html(get_content());\\n  }\\n\\n  function hide(d) {\\n    options.tooltip.style(\\'display\\', \\'none\\');\\n  }\\n\\n  function move(d) {\\n    options.tooltip.style(\\'display\\', \\'block\\');\\n    options.tooltip.style(\\'left\\', (d.pageX + 5) + \\'px\\');\\n    options.tooltip.style(\\'top\\', d.pageY + \\'px\\');\\n  }\\n\\n  target.on(\\'mouseover\\', show);\\n  target.on(\\'mouseout\\', hide);\\n  target.on(\\'mousemove\\', move);\\n}\\n\\n/**\\n * Adds a condition inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!condition} condition Condition to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_condition(options, condition, output) {\\n  threshold_format = d3.format(\\'r\\');\\n\\n  if (condition.type === \\'IS_MISSING\\') {\\n    display_node_text(options, `${condition.attribute} is missing`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'IS_TRUE\\') {\\n    display_node_text(options, `${condition.attribute} is true`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'NUMERICAL_IS_HIGHER_THAN\\') {\\n    format = d3.format(\\'r\\');\\n    display_node_text(\\n        options,\\n        `${condition.attribute} >= ${threshold_format(condition.threshold)}`,\\n        output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'CATEGORICAL_IS_IN\\') {\\n    display_node_text_with_tooltip(\\n        options, `${condition.attribute} in [...]`,\\n        `${condition.attribute} in [${condition.mask}]`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'CATEGORICAL_SET_CONTAINS\\') {\\n    display_node_text_with_tooltip(\\n        options, `${condition.attribute} intersect [...]`,\\n        `${condition.attribute} intersect [${condition.mask}]`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'NUMERICAL_SPARSE_OBLIQUE\\') {\\n    display_node_text_with_tooltip(\\n        options, `Sparse oblique split...`,\\n        `[${condition.attributes}]*[${condition.weights}]>=${\\n            threshold_format(condition.threshold)}`,\\n        output);\\n    return;\\n  }\\n\\n  display_node_text(\\n      options, `Non supported condition ${condition.type}`, output);\\n}\\n\\n/**\\n * Adds a value inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!value} value Value to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_value(options, value, output) {\\n  if (value.type === \\'PROBABILITY\\') {\\n    const left_margin = 0;\\n    const right_margin = 50;\\n    const plot_width = options.node_x_size - options.node_padding * 2 -\\n        left_margin - right_margin;\\n\\n    let cusum = Array.from(d3.cumsum(value.distribution));\\n    cusum.unshift(0);\\n    const distribution_plot = output.content.append(\\'g\\').attr(\\n        \\'transform\\', `translate(0,${output.vertical_offset + 0.5})`);\\n\\n    distribution_plot.selectAll(\\'rect\\')\\n        .data(value.distribution)\\n        .join(\\'rect\\')\\n        .attr(\\'height\\', 10)\\n        .attr(\\n            \\'x\\',\\n            (d, i) =>\\n                (cusum[i] * plot_width + left_margin + options.node_padding))\\n        .attr(\\'width\\', (d, i) => d * plot_width)\\n        .style(\\'fill\\', (d, i) => d3.schemeSet1[i]);\\n\\n    const num_examples =\\n        output.content.append(\\'g\\')\\n            .attr(\\'transform\\', `translate(0,${output.vertical_offset})`)\\n            .append(\\'text\\')\\n            .attr(\\'x\\', options.node_x_size - options.node_padding)\\n            .attr(\\'alignment-baseline\\', \\'hanging\\')\\n            .attr(\\'text-anchor\\', \\'end\\')\\n            .text(`(${value.num_examples})`);\\n\\n    const distribution_details = d3.create(\\'ul\\');\\n    distribution_details.selectAll(\\'li\\')\\n        .data(value.distribution)\\n        .join(\\'li\\')\\n        .append(\\'span\\')\\n        .text(\\n            (d, i) =>\\n                \\'class \\' + i + \\': \\' + d3.format(\\'.3%\\')(value.distribution[i]));\\n\\n    add_tooltip(options, distribution_plot, () => distribution_details.html());\\n    add_tooltip(options, num_examples, () => \\'Number of examples\\');\\n\\n    output.vertical_offset += 10;\\n    return;\\n  }\\n\\n  if (value.type === \\'REGRESSION\\') {\\n    display_node_text(\\n        options,\\n        \\'value: \\' + d3.format(\\'r\\')(value.value) + ` (` +\\n            d3.format(\\'.6\\')(value.num_examples) + `)`,\\n        output);\\n    return;\\n  }\\n\\n  display_node_text(options, `Non supported value ${value.type}`, output);\\n}\\n\\n/**\\n * Adds an explanation inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!explanation} explanation Explanation to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_explanation(options, explanation, output) {\\n  // Margin before the explanation.\\n  output.vertical_offset += 10;\\n\\n  display_node_text(\\n      options, `Non supported explanation ${explanation.type}`, output);\\n}\\n\\n\\n/**\\n * Draw the edges of the tree.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!graph} graph D3 search handle containing the graph.\\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\\n *     data, etc.).\\n */\\nfunction display_edges(options, graph, tree_struct) {\\n  // Draw an edge between a parent and a child node with a bezier.\\n  function draw_single_edge(d) {\\n    return \\'M\\' + (d.source.y + options.node_x_size) + \\',\\' + d.source.x + \\' C\\' +\\n        (d.source.y + options.node_x_size + options.edge_rounding) + \\',\\' +\\n        d.source.x + \\' \\' + (d.target.y - options.edge_rounding) + \\',\\' +\\n        d.target.x + \\' \\' + d.target.y + \\',\\' + d.target.x;\\n  }\\n\\n  graph.append(\\'g\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.2)\\n      .selectAll(\\'path\\')\\n      .data(tree_struct.links())\\n      .join(\\'path\\')\\n      .attr(\\'d\\', draw_single_edge)\\n      .attr(\\n          \\'stroke\\', d => (d.target === d.source.children[0]) ? \\'#0F0\\' : \\'#F00\\');\\n}\\n\\ndisplay_tree({\"margin\": 10, \"node_x_size\": 160, \"node_y_size\": 28, \"node_x_offset\": 180, \"node_y_offset\": 33, \"font_size\": 10, \"edge_rounding\": 20, \"node_padding\": 2, \"show_plot_bounding_box\": false}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.28688524590163933, 0.7049180327868853, 0.00819672131147541], \"num_examples\": 366.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Ser\", \"threshold\": 8.076915740966797}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.0076045627376425855, 0.9809885931558935, 0.011406844106463879], \"num_examples\": 263.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Ser\", \"threshold\": 8.856769561767578}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.4, 0.0, 0.6], \"num_examples\": 5.0}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.0, 1.0, 0.0], \"num_examples\": 258.0}}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [1.0, 0.0, 0.0], \"num_examples\": 103.0}}]}, \"#tree_plot_7c1363afdee54902bb71e2703ab75131\")\\n</script>\\n'"]},"metadata":{},"execution_count":5}],"source":["from pandas.core.frame import DataFrame\n","import tensorflow_decision_forests as tfdf\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import math\n","\n","# set dataset\n","trainDataset = pd.read_csv(\"/content/coronaviridae-genome (1).csv\")\n","del trainDataset['Unnamed: 0']\n","\n","# convert to tensorflow datasets\n","trainTFDS = tfdf.keras.pd_dataframe_to_tf_dataset(trainDataset, label=\"Status\", max_num_classes=200)\n","\n","# Train Model\n","model = tfdf.keras.RandomForestModel()\n","# model.compile(metrics=[\"accuracy\"])\n","\n","model.fit(x=trainTFDS)\n","\n","model.make_inspector().evaluation()\n","\n","print(model.summary())\n","\n","tfdf.model_plotter.plot_model(model)"]}]}