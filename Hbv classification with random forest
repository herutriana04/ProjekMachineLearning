{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Hbv classification with random forest","provenance":[{"file_id":"1hiUZP-qLDShu9gJGx7eb2rd3ZenL-kih","timestamp":1643419200994}],"authorship_tag":"ABX9TyMLYGyeunbCiYiYMCq9IxUG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv(\"/content/hbv-genome.csv\")\n","df"],"metadata":{"id":"KxhbxEwr9PuS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install tensorflow_decision_forests"],"metadata":{"id":"ag5l0eFa9uhn"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"WTAsbEXG9B6K","executionInfo":{"status":"ok","timestamp":1643419310672,"user_tz":-420,"elapsed":9960,"user":{"displayName":"Heru Triana","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj5sLnzUpfXBsmMId8RvnAH_VN-qd0whpiPcuz8HQ=s64","userId":"04081911873733276476"}},"outputId":"e5984825-84aa-4e6b-8d1e-866d34b82a67"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:root:TF Parameter Server distributed training not available (this is expected for the pre-build release).\n"]},{"output_type":"stream","name":"stdout","text":["Warning:  Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n","Use /tmp/tmppsnuqr3v as temporary training directory\n","Starting reading the dataset\n","1/2 [==============>...............] - ETA: 4s\n","Dataset read in 0:00:04.425201\n","Training model\n","Model trained in 0:00:00.298604\n","Compiling model\n","2/2 [==============================] - 5s 368ms/step\n","WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7faaa9d0cc20> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7faaa9d0cc20> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"]},{"output_type":"stream","name":"stdout","text":["WARNING: AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7faaa9d0cc20> and will run it as-is.\n","Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n","Cause: could not get source code\n","To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n","Model: \"random_forest_model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n","=================================================================\n","Total params: 1\n","Trainable params: 0\n","Non-trainable params: 1\n","_________________________________________________________________\n","Type: \"RANDOM_FOREST\"\n","Task: CLASSIFICATION\n","Label: \"__LABEL\"\n","\n","Input Features (21):\n","\tAla\n","\tArg\n","\tAsn\n","\tAsp\n","\tCys\n","\tGln\n","\tGlu\n","\tGly\n","\tHis\n","\tIle\n","\tLeu\n","\tLys\n","\tMet\n","\tPhe\n","\tPro\n","\tSer\n","\tThr\n","\tTrp\n","\tTyr\n","\tUnnamed:_0\n","\tVal\n","\n","No weights\n","\n","Variable Importance: MEAN_MIN_DEPTH:\n","    1.    \"__LABEL\"  7.977782 ################\n","    2.        \"Trp\"  7.955859 ###############\n","    3.        \"Asp\"  7.789034 ###############\n","    4.        \"Arg\"  7.343903 ##############\n","    5.        \"Cys\"  7.339642 ##############\n","    6.        \"Phe\"  7.194334 #############\n","    7.        \"Tyr\"  7.178333 #############\n","    8.        \"Asn\"  7.177593 #############\n","    9.        \"Leu\"  7.150116 #############\n","   10.        \"Lys\"  7.148728 #############\n","   11.        \"Gly\"  7.118603 #############\n","   12.        \"Thr\"  7.015378 #############\n","   13.        \"Glu\"  6.943764 #############\n","   14.        \"Ile\"  6.685123 ############\n","   15.        \"Gln\"  6.512683 ###########\n","   16.        \"His\"  6.402028 ###########\n","   17.        \"Pro\"  5.859954 ##########\n","   18.        \"Ser\"  5.702787 #########\n","   19.        \"Val\"  5.582901 #########\n","   20.        \"Met\"  4.858748 #######\n","   21.        \"Ala\"  3.968936 ####\n","   22. \"Unnamed:_0\"  2.323602 \n","\n","Variable Importance: NUM_AS_ROOT:\n","    1. \"Unnamed:_0\" 83.000000 ################\n","    2.        \"Met\" 59.000000 ###########\n","    3.        \"Ala\" 52.000000 #########\n","    4.        \"His\" 26.000000 ####\n","    5.        \"Val\" 22.000000 ####\n","    6.        \"Ile\"  8.000000 #\n","    7.        \"Gln\"  7.000000 #\n","    8.        \"Lys\"  7.000000 #\n","    9.        \"Pro\"  7.000000 #\n","   10.        \"Thr\"  7.000000 #\n","   11.        \"Cys\"  4.000000 \n","   12.        \"Gly\"  4.000000 \n","   13.        \"Ser\"  4.000000 \n","   14.        \"Asn\"  3.000000 \n","   15.        \"Phe\"  3.000000 \n","   16.        \"Leu\"  2.000000 \n","   17.        \"Glu\"  1.000000 \n","   18.        \"Tyr\"  1.000000 \n","\n","Variable Importance: NUM_NODES:\n","    1. \"Unnamed:_0\" 6332.000000 ################\n","    2.        \"Ser\" 1021.000000 ##\n","    3.        \"Ala\" 904.000000 ##\n","    4.        \"Pro\" 732.000000 #\n","    5.        \"Val\" 636.000000 #\n","    6.        \"Thr\" 532.000000 #\n","    7.        \"Leu\" 442.000000 #\n","    8.        \"Met\" 418.000000 #\n","    9.        \"Glu\" 404.000000 #\n","   10.        \"Ile\" 366.000000 \n","   11.        \"Arg\" 257.000000 \n","   12.        \"Lys\" 254.000000 \n","   13.        \"Gly\" 227.000000 \n","   14.        \"Tyr\" 223.000000 \n","   15.        \"His\" 208.000000 \n","   16.        \"Cys\" 197.000000 \n","   17.        \"Gln\" 182.000000 \n","   18.        \"Phe\" 180.000000 \n","   19.        \"Asn\" 120.000000 \n","   20.        \"Asp\" 37.000000 \n","   21.        \"Trp\"  4.000000 \n","\n","Variable Importance: SUM_SCORE:\n","    1. \"Unnamed:_0\" 56913.216762 ################\n","    2.        \"Ala\" 6033.308550 #\n","    3.        \"Ser\" 5161.138498 #\n","    4.        \"Pro\" 3733.864483 #\n","    5.        \"Val\" 2969.562487 \n","    6.        \"Met\" 2729.680981 \n","    7.        \"Glu\" 2149.720021 \n","    8.        \"Thr\" 1987.389130 \n","    9.        \"Leu\" 1597.608167 \n","   10.        \"Ile\" 1582.026237 \n","   11.        \"His\" 1102.951887 \n","   12.        \"Gln\" 1076.491375 \n","   13.        \"Arg\" 846.401811 \n","   14.        \"Lys\" 816.735160 \n","   15.        \"Gly\" 767.845322 \n","   16.        \"Tyr\" 766.875383 \n","   17.        \"Phe\" 620.252769 \n","   18.        \"Cys\" 589.545288 \n","   19.        \"Asn\" 464.890850 \n","   20.        \"Asp\" 122.990271 \n","   21.        \"Trp\" 14.143856 \n","\n","\n","\n","Winner take all: true\n","Out-of-bag evaluation: accuracy:0.948104 logloss:0.237703\n","Number of trees: 300\n","Total number of nodes: 27652\n","\n","Number of nodes by tree:\n","Count: 300 Average: 92.1733 StdDev: 10.252\n","Min: 67 Max: 119 Ignored: 0\n","----------------------------------------------\n","[  67,  69)  2   0.67%   0.67% #\n","[  69,  72)  5   1.67%   2.33% #\n","[  72,  74)  0   0.00%   2.33%\n","[  74,  77)  6   2.00%   4.33% ##\n","[  77,  80) 22   7.33%  11.67% ######\n","[  80,  82) 14   4.67%  16.33% ####\n","[  82,  85) 26   8.67%  25.00% #######\n","[  85,  88) 36  12.00%  37.00% #########\n","[  88,  90) 17   5.67%  42.67% ####\n","[  90,  93) 17   5.67%  48.33% ####\n","[  93,  96) 39  13.00%  61.33% ##########\n","[  96,  98) 23   7.67%  69.00% ######\n","[  98, 101) 26   8.67%  77.67% #######\n","[ 101, 104) 28   9.33%  87.00% #######\n","[ 104, 106) 13   4.33%  91.33% ###\n","[ 106, 109) 10   3.33%  94.67% ###\n","[ 109, 112)  7   2.33%  97.00% ##\n","[ 112, 114)  4   1.33%  98.33% #\n","[ 114, 117)  3   1.00%  99.33% #\n","[ 117, 119]  2   0.67% 100.00% #\n","\n","Depth by leafs:\n","Count: 13976 Average: 7.99692 StdDev: 3.09105\n","Min: 1 Max: 15 Ignored: 0\n","----------------------------------------------\n","[  1,  2)   21   0.15%   0.15%\n","[  2,  3)  278   1.99%   2.14% ##\n","[  3,  4)  540   3.86%   6.00% ###\n","[  4,  5)  923   6.60%  12.61% #####\n","[  5,  6) 1398  10.00%  22.61% ########\n","[  6,  7) 1645  11.77%  34.38% #########\n","[  7,  8) 1798  12.86%  47.25% ##########\n","[  8,  9) 1668  11.93%  59.18% #########\n","[  9, 10) 1502  10.75%  69.93% ########\n","[ 10, 11) 1217   8.71%  78.63% #######\n","[ 11, 12)  951   6.80%  85.44% #####\n","[ 12, 13)  686   4.91%  90.35% ####\n","[ 13, 14)  577   4.13%  94.48% ###\n","[ 14, 15)  376   2.69%  97.17% ##\n","[ 15, 15]  396   2.83% 100.00% ##\n","\n","Number of training obs by leaf:\n","Count: 13976 Average: 21.5083 StdDev: 44.5644\n","Min: 5 Max: 529 Ignored: 0\n","----------------------------------------------\n","[   5,  31) 12105  86.61%  86.61% ##########\n","[  31,  57)   807   5.77%  92.39% #\n","[  57,  83)   311   2.23%  94.61%\n","[  83, 110)   164   1.17%  95.79%\n","[ 110, 136)   156   1.12%  96.90%\n","[ 136, 162)   140   1.00%  97.90%\n","[ 162, 188)    68   0.49%  98.39%\n","[ 188, 215)    54   0.39%  98.78%\n","[ 215, 241)    48   0.34%  99.12%\n","[ 241, 267)    21   0.15%  99.27%\n","[ 267, 293)    22   0.16%  99.43%\n","[ 293, 320)    16   0.11%  99.54%\n","[ 320, 346)    10   0.07%  99.61%\n","[ 346, 372)     8   0.06%  99.67%\n","[ 372, 398)     4   0.03%  99.70%\n","[ 398, 425)     2   0.01%  99.71%\n","[ 425, 451)    13   0.09%  99.81%\n","[ 451, 477)    16   0.11%  99.92%\n","[ 477, 503)     7   0.05%  99.97%\n","[ 503, 529]     4   0.03% 100.00%\n","\n","Attribute in nodes:\n","\t6332 : Unnamed:_0 [NUMERICAL]\n","\t1021 : Ser [NUMERICAL]\n","\t904 : Ala [NUMERICAL]\n","\t732 : Pro [NUMERICAL]\n","\t636 : Val [NUMERICAL]\n","\t532 : Thr [NUMERICAL]\n","\t442 : Leu [NUMERICAL]\n","\t418 : Met [NUMERICAL]\n","\t404 : Glu [NUMERICAL]\n","\t366 : Ile [NUMERICAL]\n","\t257 : Arg [NUMERICAL]\n","\t254 : Lys [NUMERICAL]\n","\t227 : Gly [NUMERICAL]\n","\t223 : Tyr [NUMERICAL]\n","\t208 : His [NUMERICAL]\n","\t197 : Cys [NUMERICAL]\n","\t182 : Gln [NUMERICAL]\n","\t180 : Phe [NUMERICAL]\n","\t120 : Asn [NUMERICAL]\n","\t37 : Asp [NUMERICAL]\n","\t4 : Trp [NUMERICAL]\n","\n","Attribute in nodes with depth <= 0:\n","\t83 : Unnamed:_0 [NUMERICAL]\n","\t59 : Met [NUMERICAL]\n","\t52 : Ala [NUMERICAL]\n","\t26 : His [NUMERICAL]\n","\t22 : Val [NUMERICAL]\n","\t8 : Ile [NUMERICAL]\n","\t7 : Thr [NUMERICAL]\n","\t7 : Pro [NUMERICAL]\n","\t7 : Lys [NUMERICAL]\n","\t7 : Gln [NUMERICAL]\n","\t4 : Ser [NUMERICAL]\n","\t4 : Gly [NUMERICAL]\n","\t4 : Cys [NUMERICAL]\n","\t3 : Phe [NUMERICAL]\n","\t3 : Asn [NUMERICAL]\n","\t2 : Leu [NUMERICAL]\n","\t1 : Tyr [NUMERICAL]\n","\t1 : Glu [NUMERICAL]\n","\n","Attribute in nodes with depth <= 1:\n","\t250 : Unnamed:_0 [NUMERICAL]\n","\t129 : Ala [NUMERICAL]\n","\t101 : Met [NUMERICAL]\n","\t58 : Val [NUMERICAL]\n","\t46 : His [NUMERICAL]\n","\t35 : Ser [NUMERICAL]\n","\t34 : Pro [NUMERICAL]\n","\t30 : Gln [NUMERICAL]\n","\t26 : Ile [NUMERICAL]\n","\t24 : Leu [NUMERICAL]\n","\t21 : Thr [NUMERICAL]\n","\t20 : Glu [NUMERICAL]\n","\t19 : Lys [NUMERICAL]\n","\t18 : Cys [NUMERICAL]\n","\t17 : Phe [NUMERICAL]\n","\t16 : Gly [NUMERICAL]\n","\t14 : Asn [NUMERICAL]\n","\t10 : Tyr [NUMERICAL]\n","\t8 : Arg [NUMERICAL]\n","\t2 : Asp [NUMERICAL]\n","\t1 : Trp [NUMERICAL]\n","\n","Attribute in nodes with depth <= 2:\n","\t497 : Unnamed:_0 [NUMERICAL]\n","\t191 : Ala [NUMERICAL]\n","\t158 : Met [NUMERICAL]\n","\t128 : Ser [NUMERICAL]\n","\t118 : Val [NUMERICAL]\n","\t89 : Pro [NUMERICAL]\n","\t77 : His [NUMERICAL]\n","\t60 : Gln [NUMERICAL]\n","\t57 : Leu [NUMERICAL]\n","\t56 : Glu [NUMERICAL]\n","\t54 : Thr [NUMERICAL]\n","\t53 : Ile [NUMERICAL]\n","\t40 : Lys [NUMERICAL]\n","\t39 : Gly [NUMERICAL]\n","\t35 : Phe [NUMERICAL]\n","\t30 : Tyr [NUMERICAL]\n","\t27 : Cys [NUMERICAL]\n","\t21 : Arg [NUMERICAL]\n","\t20 : Asn [NUMERICAL]\n","\t8 : Asp [NUMERICAL]\n","\t1 : Trp [NUMERICAL]\n","\n","Attribute in nodes with depth <= 3:\n","\t874 : Unnamed:_0 [NUMERICAL]\n","\t279 : Ala [NUMERICAL]\n","\t238 : Ser [NUMERICAL]\n","\t207 : Met [NUMERICAL]\n","\t196 : Pro [NUMERICAL]\n","\t180 : Val [NUMERICAL]\n","\t110 : Leu [NUMERICAL]\n","\t104 : Ile [NUMERICAL]\n","\t101 : Glu [NUMERICAL]\n","\t100 : His [NUMERICAL]\n","\t98 : Thr [NUMERICAL]\n","\t97 : Gln [NUMERICAL]\n","\t71 : Gly [NUMERICAL]\n","\t64 : Lys [NUMERICAL]\n","\t60 : Tyr [NUMERICAL]\n","\t51 : Phe [NUMERICAL]\n","\t45 : Asn [NUMERICAL]\n","\t45 : Arg [NUMERICAL]\n","\t43 : Cys [NUMERICAL]\n","\t14 : Asp [NUMERICAL]\n","\t2 : Trp [NUMERICAL]\n","\n","Attribute in nodes with depth <= 5:\n","\t2141 : Unnamed:_0 [NUMERICAL]\n","\t514 : Ser [NUMERICAL]\n","\t482 : Ala [NUMERICAL]\n","\t400 : Pro [NUMERICAL]\n","\t360 : Val [NUMERICAL]\n","\t283 : Met [NUMERICAL]\n","\t242 : Thr [NUMERICAL]\n","\t237 : Leu [NUMERICAL]\n","\t201 : Ile [NUMERICAL]\n","\t190 : Glu [NUMERICAL]\n","\t142 : Gln [NUMERICAL]\n","\t140 : His [NUMERICAL]\n","\t136 : Gly [NUMERICAL]\n","\t124 : Tyr [NUMERICAL]\n","\t122 : Arg [NUMERICAL]\n","\t116 : Lys [NUMERICAL]\n","\t103 : Phe [NUMERICAL]\n","\t93 : Cys [NUMERICAL]\n","\t79 : Asn [NUMERICAL]\n","\t23 : Asp [NUMERICAL]\n","\t4 : Trp [NUMERICAL]\n","\n","Condition type in nodes:\n","\t13676 : HigherCondition\n","Condition type in nodes with depth <= 0:\n","\t300 : HigherCondition\n","Condition type in nodes with depth <= 1:\n","\t879 : HigherCondition\n","Condition type in nodes with depth <= 2:\n","\t1759 : HigherCondition\n","Condition type in nodes with depth <= 3:\n","\t2979 : HigherCondition\n","Condition type in nodes with depth <= 5:\n","\t6132 : HigherCondition\n","Node format: NOT_SET\n","\n","Training OOB:\n","\ttrees: 1, Out-of-bag evaluation: accuracy:0.916442 logloss:3.01173\n","\ttrees: 11, Out-of-bag evaluation: accuracy:0.925553 logloss:0.931875\n","\ttrees: 21, Out-of-bag evaluation: accuracy:0.938124 logloss:0.538644\n","\ttrees: 31, Out-of-bag evaluation: accuracy:0.941118 logloss:0.368288\n","\ttrees: 41, Out-of-bag evaluation: accuracy:0.938124 logloss:0.374686\n","\ttrees: 51, Out-of-bag evaluation: accuracy:0.943114 logloss:0.34098\n","\ttrees: 61, Out-of-bag evaluation: accuracy:0.94012 logloss:0.308795\n","\ttrees: 71, Out-of-bag evaluation: accuracy:0.939122 logloss:0.275115\n","\ttrees: 81, Out-of-bag evaluation: accuracy:0.94012 logloss:0.275209\n","\ttrees: 91, Out-of-bag evaluation: accuracy:0.941118 logloss:0.277211\n","\ttrees: 101, Out-of-bag evaluation: accuracy:0.942116 logloss:0.276002\n","\ttrees: 111, Out-of-bag evaluation: accuracy:0.94511 logloss:0.275288\n","\ttrees: 121, Out-of-bag evaluation: accuracy:0.94511 logloss:0.274844\n","\ttrees: 131, Out-of-bag evaluation: accuracy:0.94511 logloss:0.274032\n","\ttrees: 141, Out-of-bag evaluation: accuracy:0.946108 logloss:0.272492\n","\ttrees: 151, Out-of-bag evaluation: accuracy:0.948104 logloss:0.272541\n","\ttrees: 161, Out-of-bag evaluation: accuracy:0.948104 logloss:0.272097\n","\ttrees: 171, Out-of-bag evaluation: accuracy:0.946108 logloss:0.272161\n","\ttrees: 181, Out-of-bag evaluation: accuracy:0.949102 logloss:0.27285\n","\ttrees: 191, Out-of-bag evaluation: accuracy:0.949102 logloss:0.273122\n","\ttrees: 201, Out-of-bag evaluation: accuracy:0.947106 logloss:0.240756\n","\ttrees: 211, Out-of-bag evaluation: accuracy:0.947106 logloss:0.2403\n","\ttrees: 221, Out-of-bag evaluation: accuracy:0.946108 logloss:0.238568\n","\ttrees: 231, Out-of-bag evaluation: accuracy:0.947106 logloss:0.238837\n","\ttrees: 241, Out-of-bag evaluation: accuracy:0.946108 logloss:0.238167\n","\ttrees: 251, Out-of-bag evaluation: accuracy:0.946108 logloss:0.238007\n","\ttrees: 261, Out-of-bag evaluation: accuracy:0.947106 logloss:0.237847\n","\ttrees: 271, Out-of-bag evaluation: accuracy:0.948104 logloss:0.237405\n","\ttrees: 281, Out-of-bag evaluation: accuracy:0.948104 logloss:0.237771\n","\ttrees: 291, Out-of-bag evaluation: accuracy:0.948104 logloss:0.238116\n","\ttrees: 300, Out-of-bag evaluation: accuracy:0.948104 logloss:0.237703\n","\n","None\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\n<script src=\"https://d3js.org/d3.v6.min.js\"></script>\\n<div id=\"tree_plot_facabcdb700041d08b74ee961fc8993c\"></div>\\n<script>\\n/*\\n * Copyright 2021 Google LLC.\\n * Licensed under the Apache License, Version 2.0 (the \"License\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     https://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \"AS IS\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\n/**\\n *  Plotting of decision trees generated by TF-DF.\\n *\\n *  A tree is a recursive structure of node objects.\\n *  A node contains one or more of the following components:\\n *\\n *    - A value: Representing the output of the node. If the node is not a leaf,\\n *      the value is only present for analysis i.e. it is not used for\\n *      predictions.\\n *\\n *    - A condition : For non-leaf nodes, the condition (also known as split)\\n *      defines a binary test to branch to the positive or negative child.\\n *\\n *    - An explanation: Generally a plot showing the relation between the label\\n *      and the condition to give insights about the effect of the condition.\\n *\\n *    - Two children : For non-leaf nodes, the children nodes. The first\\n *      children (i.e. \"node.children[0]\") is the negative children (drawn in\\n *      red). The second children is the positive one (drawn in green).\\n *\\n */\\n\\n/**\\n * Plots a single decision tree into a DOM element.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!tree} raw_tree Recursive tree structure.\\n * @param {string} canvas_id Id of the output dom element.\\n */\\nfunction display_tree(options, raw_tree, canvas_id) {\\n  console.log(options);\\n\\n  // Determine the node placement.\\n  const tree_struct = d3.tree().nodeSize(\\n      [options.node_y_offset, options.node_x_offset])(d3.hierarchy(raw_tree));\\n\\n  // Boundaries of the node placement.\\n  let x_min = Infinity;\\n  let x_max = -x_min;\\n  let y_min = Infinity;\\n  let y_max = -x_min;\\n\\n  tree_struct.each(d => {\\n    if (d.x > x_max) x_max = d.x;\\n    if (d.x < x_min) x_min = d.x;\\n    if (d.y > y_max) y_max = d.y;\\n    if (d.y < y_min) y_min = d.y;\\n  });\\n\\n  // Size of the plot.\\n  const width = y_max - y_min + options.node_x_size + options.margin * 2;\\n  const height = x_max - x_min + options.node_y_size + options.margin * 2 +\\n      options.node_y_offset - options.node_y_size;\\n\\n  const plot = d3.select(canvas_id);\\n\\n  // Tool tip\\n  options.tooltip = plot.append(\\'div\\')\\n                        .attr(\\'width\\', 100)\\n                        .attr(\\'height\\', 100)\\n                        .style(\\'padding\\', \\'4px\\')\\n                        .style(\\'background\\', \\'#fff\\')\\n                        .style(\\'box-shadow\\', \\'4px 4px 0px rgba(0,0,0,0.1)\\')\\n                        .style(\\'border\\', \\'1px solid black\\')\\n                        .style(\\'font-family\\', \\'sans-serif\\')\\n                        .style(\\'font-size\\', options.font_size)\\n                        .style(\\'position\\', \\'absolute\\')\\n                        .style(\\'z-index\\', \\'10\\')\\n                        .attr(\\'pointer-events\\', \\'none\\')\\n                        .style(\\'display\\', \\'none\\');\\n\\n  // Create canvas\\n  const svg = plot.append(\\'svg\\').attr(\\'width\\', width).attr(\\'height\\', height);\\n  const graph =\\n      svg.style(\\'overflow\\', \\'visible\\')\\n          .append(\\'g\\')\\n          .attr(\\'font-family\\', \\'sans-serif\\')\\n          .attr(\\'font-size\\', options.font_size)\\n          .attr(\\n              \\'transform\\',\\n              () => `translate(${options.margin},${\\n                  - x_min + options.node_y_offset / 2 + options.margin})`);\\n\\n  // Plot bounding box.\\n  if (options.show_plot_bounding_box) {\\n    svg.append(\\'rect\\')\\n        .attr(\\'width\\', width)\\n        .attr(\\'height\\', height)\\n        .attr(\\'fill\\', \\'none\\')\\n        .attr(\\'stroke-width\\', 1.0)\\n        .attr(\\'stroke\\', \\'black\\');\\n  }\\n\\n  // Draw the edges.\\n  display_edges(options, graph, tree_struct);\\n\\n  // Draw the nodes.\\n  display_nodes(options, graph, tree_struct);\\n}\\n\\n/**\\n * Draw the nodes of the tree.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!graph} graph D3 search handle containing the graph.\\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\\n *     data, etc.).\\n */\\nfunction display_nodes(options, graph, tree_struct) {\\n  const nodes = graph.append(\\'g\\')\\n                    .selectAll(\\'g\\')\\n                    .data(tree_struct.descendants())\\n                    .join(\\'g\\')\\n                    .attr(\\'transform\\', d => `translate(${d.y},${d.x})`);\\n\\n  nodes.append(\\'rect\\')\\n      .attr(\\'x\\', 0.5)\\n      .attr(\\'y\\', 0.5)\\n      .attr(\\'width\\', options.node_x_size)\\n      .attr(\\'height\\', options.node_y_size)\\n      .attr(\\'stroke\\', \\'lightgrey\\')\\n      .attr(\\'stroke-width\\', 1)\\n      .attr(\\'fill\\', \\'white\\')\\n      .attr(\\'y\\', -options.node_y_size / 2);\\n\\n  // Brackets on the right of condition nodes without children.\\n  non_leaf_node_without_children =\\n      nodes.filter(node => node.data.condition != null && node.children == null)\\n          .append(\\'g\\')\\n          .attr(\\'transform\\', `translate(${options.node_x_size},0)`);\\n\\n  non_leaf_node_without_children.append(\\'path\\')\\n      .attr(\\'d\\', \\'M0,0 C 10,0 0,10 10,10\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.0)\\n      .attr(\\'stroke\\', \\'#F00\\');\\n\\n  non_leaf_node_without_children.append(\\'path\\')\\n      .attr(\\'d\\', \\'M0,0 C 10,0 0,-10 10,-10\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.0)\\n      .attr(\\'stroke\\', \\'#0F0\\');\\n\\n  const node_content = nodes.append(\\'g\\').attr(\\n      \\'transform\\',\\n      `translate(0,${options.node_padding - options.node_y_size / 2})`);\\n\\n  node_content.append(node => create_node_element(options, node));\\n}\\n\\n/**\\n * Creates the D3 content for a single node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!node} node Node to draw.\\n * @return {!d3} D3 content.\\n */\\nfunction create_node_element(options, node) {\\n  // Output accumulator.\\n  let output = {\\n    // Content to draw.\\n    content: d3.create(\\'svg:g\\'),\\n    // Vertical offset to the next element to draw.\\n    vertical_offset: 0\\n  };\\n\\n  // Conditions.\\n  if (node.data.condition != null) {\\n    display_condition(options, node.data.condition, output);\\n  }\\n\\n  // Values.\\n  if (node.data.value != null) {\\n    display_value(options, node.data.value, output);\\n  }\\n\\n  // Explanations.\\n  if (node.data.explanation != null) {\\n    display_explanation(options, node.data.explanation, output);\\n  }\\n\\n  return output.content.node();\\n}\\n\\n\\n/**\\n * Adds a single line of text inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {string} text Text to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_node_text(options, text, output) {\\n  output.content.append(\\'text\\')\\n      .attr(\\'x\\', options.node_padding)\\n      .attr(\\'y\\', output.vertical_offset)\\n      .attr(\\'alignment-baseline\\', \\'hanging\\')\\n      .text(text);\\n  output.vertical_offset += 10;\\n}\\n\\n/**\\n * Adds a single line of text inside of a node with a tooltip.\\n * @param {!options} options Dictionary of configurations.\\n * @param {string} text Text to display.\\n * @param {string} tooltip Text in the Tooltip.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_node_text_with_tooltip(options, text, tooltip, output) {\\n  const item = output.content.append(\\'text\\')\\n                   .attr(\\'x\\', options.node_padding)\\n                   .attr(\\'alignment-baseline\\', \\'hanging\\')\\n                   .text(text);\\n\\n  add_tooltip(options, item, () => tooltip);\\n  output.vertical_offset += 10;\\n}\\n\\n/**\\n * Adds a tooltip to a dom element.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!dom} target Dom element to equip with a tooltip.\\n * @param {!func} get_content Generates the html content of the tooltip.\\n */\\nfunction add_tooltip(options, target, get_content) {\\n  function show(d) {\\n    options.tooltip.style(\\'display\\', \\'block\\');\\n    options.tooltip.html(get_content());\\n  }\\n\\n  function hide(d) {\\n    options.tooltip.style(\\'display\\', \\'none\\');\\n  }\\n\\n  function move(d) {\\n    options.tooltip.style(\\'display\\', \\'block\\');\\n    options.tooltip.style(\\'left\\', (d.pageX + 5) + \\'px\\');\\n    options.tooltip.style(\\'top\\', d.pageY + \\'px\\');\\n  }\\n\\n  target.on(\\'mouseover\\', show);\\n  target.on(\\'mouseout\\', hide);\\n  target.on(\\'mousemove\\', move);\\n}\\n\\n/**\\n * Adds a condition inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!condition} condition Condition to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_condition(options, condition, output) {\\n  threshold_format = d3.format(\\'r\\');\\n\\n  if (condition.type === \\'IS_MISSING\\') {\\n    display_node_text(options, `${condition.attribute} is missing`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'IS_TRUE\\') {\\n    display_node_text(options, `${condition.attribute} is true`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'NUMERICAL_IS_HIGHER_THAN\\') {\\n    format = d3.format(\\'r\\');\\n    display_node_text(\\n        options,\\n        `${condition.attribute} >= ${threshold_format(condition.threshold)}`,\\n        output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'CATEGORICAL_IS_IN\\') {\\n    display_node_text_with_tooltip(\\n        options, `${condition.attribute} in [...]`,\\n        `${condition.attribute} in [${condition.mask}]`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'CATEGORICAL_SET_CONTAINS\\') {\\n    display_node_text_with_tooltip(\\n        options, `${condition.attribute} intersect [...]`,\\n        `${condition.attribute} intersect [${condition.mask}]`, output);\\n    return;\\n  }\\n\\n  if (condition.type === \\'NUMERICAL_SPARSE_OBLIQUE\\') {\\n    display_node_text_with_tooltip(\\n        options, `Sparse oblique split...`,\\n        `[${condition.attributes}]*[${condition.weights}]>=${\\n            threshold_format(condition.threshold)}`,\\n        output);\\n    return;\\n  }\\n\\n  display_node_text(\\n      options, `Non supported condition ${condition.type}`, output);\\n}\\n\\n/**\\n * Adds a value inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!value} value Value to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_value(options, value, output) {\\n  if (value.type === \\'PROBABILITY\\') {\\n    const left_margin = 0;\\n    const right_margin = 50;\\n    const plot_width = options.node_x_size - options.node_padding * 2 -\\n        left_margin - right_margin;\\n\\n    let cusum = Array.from(d3.cumsum(value.distribution));\\n    cusum.unshift(0);\\n    const distribution_plot = output.content.append(\\'g\\').attr(\\n        \\'transform\\', `translate(0,${output.vertical_offset + 0.5})`);\\n\\n    distribution_plot.selectAll(\\'rect\\')\\n        .data(value.distribution)\\n        .join(\\'rect\\')\\n        .attr(\\'height\\', 10)\\n        .attr(\\n            \\'x\\',\\n            (d, i) =>\\n                (cusum[i] * plot_width + left_margin + options.node_padding))\\n        .attr(\\'width\\', (d, i) => d * plot_width)\\n        .style(\\'fill\\', (d, i) => d3.schemeSet1[i]);\\n\\n    const num_examples =\\n        output.content.append(\\'g\\')\\n            .attr(\\'transform\\', `translate(0,${output.vertical_offset})`)\\n            .append(\\'text\\')\\n            .attr(\\'x\\', options.node_x_size - options.node_padding)\\n            .attr(\\'alignment-baseline\\', \\'hanging\\')\\n            .attr(\\'text-anchor\\', \\'end\\')\\n            .text(`(${value.num_examples})`);\\n\\n    const distribution_details = d3.create(\\'ul\\');\\n    distribution_details.selectAll(\\'li\\')\\n        .data(value.distribution)\\n        .join(\\'li\\')\\n        .append(\\'span\\')\\n        .text(\\n            (d, i) =>\\n                \\'class \\' + i + \\': \\' + d3.format(\\'.3%\\')(value.distribution[i]));\\n\\n    add_tooltip(options, distribution_plot, () => distribution_details.html());\\n    add_tooltip(options, num_examples, () => \\'Number of examples\\');\\n\\n    output.vertical_offset += 10;\\n    return;\\n  }\\n\\n  if (value.type === \\'REGRESSION\\') {\\n    display_node_text(\\n        options,\\n        \\'value: \\' + d3.format(\\'r\\')(value.value) + ` (` +\\n            d3.format(\\'.6\\')(value.num_examples) + `)`,\\n        output);\\n    return;\\n  }\\n\\n  display_node_text(options, `Non supported value ${value.type}`, output);\\n}\\n\\n/**\\n * Adds an explanation inside of a node.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!explanation} explanation Explanation to display.\\n * @param {!output} output Output display accumulator.\\n */\\nfunction display_explanation(options, explanation, output) {\\n  // Margin before the explanation.\\n  output.vertical_offset += 10;\\n\\n  display_node_text(\\n      options, `Non supported explanation ${explanation.type}`, output);\\n}\\n\\n\\n/**\\n * Draw the edges of the tree.\\n * @param {!options} options Dictionary of configurations.\\n * @param {!graph} graph D3 search handle containing the graph.\\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\\n *     data, etc.).\\n */\\nfunction display_edges(options, graph, tree_struct) {\\n  // Draw an edge between a parent and a child node with a bezier.\\n  function draw_single_edge(d) {\\n    return \\'M\\' + (d.source.y + options.node_x_size) + \\',\\' + d.source.x + \\' C\\' +\\n        (d.source.y + options.node_x_size + options.edge_rounding) + \\',\\' +\\n        d.source.x + \\' \\' + (d.target.y - options.edge_rounding) + \\',\\' +\\n        d.target.x + \\' \\' + d.target.y + \\',\\' + d.target.x;\\n  }\\n\\n  graph.append(\\'g\\')\\n      .attr(\\'fill\\', \\'none\\')\\n      .attr(\\'stroke-width\\', 1.2)\\n      .selectAll(\\'path\\')\\n      .data(tree_struct.links())\\n      .join(\\'path\\')\\n      .attr(\\'d\\', draw_single_edge)\\n      .attr(\\n          \\'stroke\\', d => (d.target === d.source.children[0]) ? \\'#0F0\\' : \\'#F00\\');\\n}\\n\\ndisplay_tree({\"margin\": 10, \"node_x_size\": 160, \"node_y_size\": 28, \"node_x_offset\": 180, \"node_y_offset\": 33, \"font_size\": 10, \"edge_rounding\": 20, \"node_padding\": 2, \"show_plot_bounding_box\": false}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8692614770459082, 0.13073852295409183], \"num_examples\": 1002.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Met\", \"threshold\": 1.6005752086639404}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8779011099899092, 0.12209889001009082], \"num_examples\": 991.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Asn\", \"threshold\": 1.612903118133545}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [1.0, 0.0], \"num_examples\": 59.0}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8701716738197425, 0.1298283261802575], \"num_examples\": 932.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Unnamed:_0\", \"threshold\": 426.0}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9606003752345216, 0.039399624765478425], \"num_examples\": 533.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Pro\", \"threshold\": 8.064516067504883}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.7493734335839599, 0.2506265664160401], \"num_examples\": 399.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Gly\", \"threshold\": 7.051571846008301}}]}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.09090909090909091, 0.9090909090909091], \"num_examples\": 11.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Arg\", \"threshold\": 7.419354438781738}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.0, 1.0], \"num_examples\": 6.0}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.2, 0.8], \"num_examples\": 5.0}}]}]}, \"#tree_plot_facabcdb700041d08b74ee961fc8993c\")\\n</script>\\n'"]},"metadata":{},"execution_count":2}],"source":["from pandas.core.frame import DataFrame\n","import tensorflow_decision_forests as tfdf\n","import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import math\n","\n","# set dataset\n","trainDataset = pd.read_csv(\"/content/hbv-genome.csv\")\n","\n","# convert to tensorflow datasets\n","trainTFDS = tfdf.keras.pd_dataframe_to_tf_dataset(trainDataset, label=\"Status\", max_num_classes=200)\n","\n","# Train Model\n","model = tfdf.keras.RandomForestModel()\n","# model.compile(metrics=[\"accuracy\"])\n","\n","model.fit(x=trainTFDS)\n","\n","model.make_inspector().evaluation()\n","\n","print(model.summary())\n","\n","tfdf.model_plotter.plot_model(model)"]}]}